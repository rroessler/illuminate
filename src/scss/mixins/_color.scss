/*
-----------------------------------------------------------------------
Mixin : Color
-----------------------------------------------------------------------
*/

/*----------  Helpers  ----------*/

/// Available Contexts
$contexts: 'primary', 'secondary', 'success', 'info', 'warning', 'danger';

/// Converts HEX to RGB list
@function -hex-to-rgb($hex) {
    @return red($hex) + ', ' + green($hex) + ', ' + blue($hex);
}

/*----------  Property Mixins  ----------*/

@mixin text($name, $alpha) {
    color: rgba(var(--#{$name}-rgb), $alpha);
}

/*----------  Component Mixins  ----------*/

@mixin variable($name, $hex) {
    --#{$name}-rgb: #{-hex-to-rgb($hex)};
    --#{$name}-color: rgba(var(--#{$name}-rgb), 1);
}

@mixin system($name, $base, $light, $dark, $text) {
    @include variable($name, $base);
    @include variable($name + '-light', $light);
    @include variable($name + '-dark', $dark);

    --#{$name}-box-shadow-color: rgba(var(--#{$name}-rgb), 0.4);
    --#{$name}-box-shadow-color-darker: rgba(var(--#{$name}-rgb), 0.6);
    --#{$name}-text-color: #{$text};
}

@mixin context($name, $parent) {
    $shades: '', '-light', '-dark';
    $suffixes: 'hex', 'rgb', 'color';

    @each $shade in $shades {
        @each $suffix in $suffixes {
            --#{$name+$shade}-#{$suffix}: var(--#{$parent + $shade}-#{$suffix});
        }
    }

    --#{$name}-box-shadow-color: var(--#{$parent}-box-shadow-color);
    --#{$name}-box-shadow-color-darker: var(--#{$parent}-box-shadow-color-darker);
    --#{$name}-text-color: var(--#{$parent}-text-color);
}
